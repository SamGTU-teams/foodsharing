version: "2.4"
services:
  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    ports:
      - "15672:15672"
    volumes:
      - ./storage/rabbitmq/data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s

  postgres:
    image: postgis/postgis:10-3.2
    restart: always
    volumes:
      - ./storage/postgres/initdb:/docker-entrypoint-initdb.d
      - ./storage/postgres/data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: foodsharing
      PGUSER: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: pg_isready
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s

  nginx:
    image: nginx:stable
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      config:
        condition: service_healthy
      parser:
        condition: service_healthy
      analyzer:
        condition: service_healthy
      ibot:
        condition: service_healthy
      tg-bot:
        condition: service_healthy
      vk-bot:
        condition: service_healthy

  config:
    image: rassafel/foodsharing-config
    restart: always
    volumes:
      - ./config-service/src/main/resources/shared:/app/shared

  parser:
    image: rassafel/foodsharing-vk-parser
    restart: on-failure
    environment:
      CALLBACK_URL: $CALLBACK_URL
    depends_on:
      config:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  analyzer:
    image: rassafel/foodsharing-analyzer
    restart: on-failure
    depends_on:
      config:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  ibot:
    image: rassafel/foodsharing-ibot
    restart: on-failure
    depends_on:
      config:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  tg-bot:
    image: rassafel/foodsharing-tg-bot
    restart: on-failure
    environment:
      TG_BOT_WEB_HOOK_PATH: $TG_BOT_WEB_HOOK_PATH
      TG_BOT_USERNAME: $TG_BOT_USERNAME
      TG_BOT_TOKEN: $TG_BOT_TOKEN
    depends_on:
      config:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  vk-bot:
    image: rassafel/foodsharing-vk-bot
    restart: on-failure
    environment:
      VK_BOT_GROUP_ID: $VK_BOT_GROUP_ID
      VK_BOT_ACCESS_TOKEN: $VK_BOT_ACCESS_TOKEN
    depends_on:
      config:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
